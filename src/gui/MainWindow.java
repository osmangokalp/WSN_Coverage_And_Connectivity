/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import algorithm.ABC;
import algorithm.DE;
import algorithm.Optimizer;
import algorithm.PSO;
import algorithm.Population;
import algorithm.SaDE;
import algorithm.Util;
import java.awt.EventQueue;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Random;
import javax.swing.JLabel;
import model.Problem;

/**
 *
 * @author osman
 */
public class MainWindow extends javax.swing.JFrame {

    final String EXPERIMENTS_OUTPUT_FOLDER_LOC = "D:\\Experiments\\sensorCoverageAndConnectivitySaDE";
    final String[] ALG_NAMES = {"SaDE", "DE", "ABC", "PSO"};
    //Random rng = new Random(2019);
    private Problem problem;

    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        newJPanel1 = new gui.SensorDrawingsPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jTextFieldNumOfSensors = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jTextFieldNumOfTargets = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jTextFieldAreaWidth = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jTextFieldSensingRadius = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jTextFieldCommunicationRadius = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jTextFieldK = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jComboBoxtargetDeploymentStrategy = new javax.swing.JComboBox<>();
        jLabelCoverage = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jLabelFESCounter = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jTextFieldNP = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jTextFieldFEs_Factor = new javax.swing.JTextField();
        jLabelConnected = new javax.swing.JLabel();
        jLabelFitness = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jComboBoxAlg = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        newJPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout newJPanel1Layout = new javax.swing.GroupLayout(newJPanel1);
        newJPanel1.setLayout(newJPanel1Layout);
        newJPanel1Layout.setHorizontalGroup(
            newJPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 498, Short.MAX_VALUE)
        );
        newJPanel1Layout.setVerticalGroup(
            newJPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 498, Short.MAX_VALUE)
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Problem Parameters"));
        jPanel1.setLayout(new java.awt.GridLayout(7, 2));

        jLabel1.setText("Num. of Sensors:");
        jPanel1.add(jLabel1);

        jTextFieldNumOfSensors.setText("50");
        jPanel1.add(jTextFieldNumOfSensors);

        jLabel2.setText("Num. of Targets:");
        jPanel1.add(jLabel2);

        jTextFieldNumOfTargets.setText("100");
        jPanel1.add(jTextFieldNumOfTargets);

        jLabel3.setText("Area Width:");
        jPanel1.add(jLabel3);

        jTextFieldAreaWidth.setText("100");
        jPanel1.add(jTextFieldAreaWidth);

        jLabel4.setText("Sensing Radius:");
        jPanel1.add(jLabel4);

        jTextFieldSensingRadius.setText("8");
        jPanel1.add(jTextFieldSensingRadius);

        jLabel9.setText("Communication Radius:");
        jPanel1.add(jLabel9);

        jTextFieldCommunicationRadius.setText("12");
        jPanel1.add(jTextFieldCommunicationRadius);

        jLabel5.setText("K:");
        jPanel1.add(jLabel5);

        jTextFieldK.setText("1");
        jPanel1.add(jTextFieldK);

        jLabel6.setText("Deployment:");
        jPanel1.add(jLabel6);

        jComboBoxtargetDeploymentStrategy.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Random", "Even" }));
        jPanel1.add(jComboBoxtargetDeploymentStrategy);

        jLabelCoverage.setText("Coverage:");

        jButton2.setText("Solve");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabelFESCounter.setText("FEs:");

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Algorithm Parameters"));
        jPanel2.setLayout(new java.awt.GridLayout(2, 2));

        jLabel7.setText("NP:");
        jPanel2.add(jLabel7);

        jTextFieldNP.setText("50");
        jPanel2.add(jTextFieldNP);

        jLabel8.setText("FEs Factor");
        jPanel2.add(jLabel8);

        jTextFieldFEs_Factor.setText("5000");
        jPanel2.add(jTextFieldFEs_Factor);

        jLabelConnected.setText("Connected:");

        jLabelFitness.setText("Fitness Value:");

        jButton3.setText("Exp");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jComboBoxAlg.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "SaDE", "DE", "ABC", "PSO" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jComboBoxAlg, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(42, 42, 42)))
                .addGap(18, 18, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelFitness)
                    .addComponent(jLabelConnected)
                    .addComponent(jLabelFESCounter)
                    .addComponent(jLabelCoverage)
                    .addComponent(newJPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(newJPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton2)
                            .addComponent(jComboBoxAlg, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton3)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabelCoverage)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelConnected)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabelFitness)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelFESCounter)
                .addGap(16, 16, 16))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        Random rng = new Random(2019);
        int areaWidth = Integer.parseInt(jTextFieldAreaWidth.getText());
        int numOfSensors = Integer.parseInt(jTextFieldNumOfSensors.getText());
        int numOfTargets = Integer.parseInt(jTextFieldNumOfTargets.getText());
        int sensingRadius = Integer.parseInt(jTextFieldSensingRadius.getText());
        int transmissionRadius = Integer.parseInt(jTextFieldCommunicationRadius.getText());
        int K = Integer.parseInt(jTextFieldK.getText());
        int targetDeploymentStrategy = jComboBoxtargetDeploymentStrategy.getSelectedIndex();
        int MAX_FES = numOfSensors * Integer.parseInt(jTextFieldFEs_Factor.getText());

        problem = new Problem(areaWidth, numOfSensors, numOfTargets, sensingRadius, transmissionRadius, K, targetDeploymentStrategy, rng);
        ((SensorDrawingsPanel) newJPanel1).setProblem(problem);
        ((SensorDrawingsPanel) newJPanel1).setSolutionArr(null);

        Thread algorithmThread;
        algorithmThread = new Thread() {
            public void run() {
                int dim = problem.numOfSensors * 2;
                int NP = Integer.parseInt(jTextFieldNP.getText());

                Population pop = Util.createRandomPopulation(rng, NP, dim, problem.areaWidth, 0, problem.objFunc);

                Optimizer optimizer = null;
                switch (jComboBoxAlg.getSelectedIndex()) {
                    case 0:
                        optimizer = new SaDE(rng, problem, MainWindow.this);
                        break;
                    case 1:
                        optimizer = new DE(0.5, 0.3, rng, problem, MainWindow.this);
                        break;
                    case 2:
                        optimizer = new ABC(dim * (NP / 2), rng, problem, MainWindow.this);
                        break;
                    case 3:
                        optimizer = new PSO(rng, problem, MainWindow.this);
                        break;
                }
                optimizer.solve(pop, 0, MAX_FES);
            }
        };
        algorithmThread.start();

    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        Random rng;
        System.out.println("");
        
        String fileName = "Exp.txt";
        
        for (int targetDeploymentStrategy = 0; targetDeploymentStrategy < 2; targetDeploymentStrategy++) {
            for (int numOfSensors = 40; numOfSensors <= 80; numOfSensors += 5) {
                for (int transmissionRadius = 6; transmissionRadius <= 16; transmissionRadius += 2) {
                    for (int j = 0; j < 1; j++) {
                        for (int seed = 0; seed < 10; seed++) {
                            rng = new Random(2019 + seed);
                            int areaWidth = Integer.parseInt(jTextFieldAreaWidth.getText());
                            //int numOfSensors = Integer.parseInt(jTextFieldNumOfSensors.getText());
                            int numOfTargets = Integer.parseInt(jTextFieldNumOfTargets.getText());
                            int sensingRadius = Integer.parseInt(jTextFieldSensingRadius.getText());
                            //int transmissionRadius = Integer.parseInt(jTextFieldCommunicationRadius.getText());
                            int K = Integer.parseInt(jTextFieldK.getText());
                            //int targetDeploymentStrategy = jComboBoxtargetDeploymentStrategy.getSelectedIndex();
                            int NP = 50;

                            problem = new Problem(areaWidth, numOfSensors, numOfTargets, sensingRadius, transmissionRadius, K, targetDeploymentStrategy, rng);
                            ((SensorDrawingsPanel) newJPanel1).setProblem(problem);
                            ((SensorDrawingsPanel) newJPanel1).setSolutionArr(null);

                            int dim = problem.numOfSensors * 2;
                            //int NP = Integer.parseInt(jTextFieldNP.getText());
                            Population pop = Util.createRandomPopulation(rng, NP, dim, problem.areaWidth, 0, problem.objFunc);
                            int MAX_FES = numOfSensors * Integer.parseInt(jTextFieldFEs_Factor.getText());

                            /*String fileName = "Exp1_FEsFactor_" + Integer.parseInt(jTextFieldFEs_Factor.getText())
                                    + "_rs_" + sensingRadius + "_rc_" + transmissionRadius
                                    + "_targets_" + (targetDeploymentStrategy == 0 ? "random" : "even")
                                    + ".txt";*/

                            Optimizer optimizer = null;

                            switch (j) {
                                case 0:
                                    optimizer = new SaDE(rng, problem, MainWindow.this);
                                    break;
                                case 1:
                                    optimizer = new DE(0.5, 0.9, rng, problem, MainWindow.this);
                                    break;
                                case 2:
                                    optimizer = new ABC(dim * (NP / 2), rng, problem, MainWindow.this);
                                    break;
                                case 3:
                                    optimizer = new PSO(rng, problem, MainWindow.this);
                                    break;
                            }

                            optimizer.solve(pop, 0, MAX_FES);
                            String text = ALG_NAMES[j] + " " + seed + " " + numOfSensors + " " + transmissionRadius + " " + (targetDeploymentStrategy == 0 ? "random" : "even")
                                    + " " + optimizer.connected + " " + optimizer.coverage;
                            System.out.println(text);
                            saveToTheFile(EXPERIMENTS_OUTPUT_FOLDER_LOC, fileName, text);
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    public void solutionChanged(double[] solArr, double f, double coverageRatio, boolean connected) {
        jLabelCoverage.setText("Coverage: " + coverageRatio);
        jLabelConnected.setText("Connected: " + connected);
        jLabelFitness.setText("Fitness Value: " + f);
        ((SensorDrawingsPanel) newJPanel1).setSolutionArr(solArr);
    }

    public void FES_Changed(int FES) {
        jLabelFESCounter.setText("FEs: " + FES);
    }

    private void saveToTheFile(String outputFolderName, String outputFileName, String line) {

        File file = new File(outputFolderName);
        if (!file.exists()) {
            if (!file.mkdirs()) {
                System.out.println("Failed to create directory!");
            }
        }

        outputFileName = outputFolderName + "\\" + outputFileName;

        BufferedWriter bw = null;
        FileWriter fw = null;
        StringBuilder sb = new StringBuilder();

        try {

            file = new File(outputFileName);

            // if file doesnt exists, then create it
            if (!file.exists()) {
                file.createNewFile();
            }

            // true = append file
            fw = new FileWriter(file.getAbsoluteFile(), true);
            bw = new BufferedWriter(fw);

            sb.append(line).append(System.getProperty("line.separator"));

            bw.write(sb.toString());

        } catch (IOException e) {

            e.printStackTrace();

        } finally {

            try {

                if (bw != null) {
                    bw.close();
                }

                if (fw != null) {
                    fw.close();
                }

            } catch (IOException ex) {

                ex.printStackTrace();

            }
        }
    }

    public double applyPrecision(double number, int precision) {
        try {
            if (number == Double.POSITIVE_INFINITY || number == Double.NEGATIVE_INFINITY) {
                return number;
            }
            BigDecimal bd = new BigDecimal(number);
            bd = bd.setScale(precision, BigDecimal.ROUND_HALF_UP);
            return bd.doubleValue();
        } catch (Exception e) {
            return number;
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JComboBox<String> jComboBoxAlg;
    private javax.swing.JComboBox<String> jComboBoxtargetDeploymentStrategy;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabelConnected;
    private javax.swing.JLabel jLabelCoverage;
    private javax.swing.JLabel jLabelFESCounter;
    private javax.swing.JLabel jLabelFitness;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JTextField jTextFieldAreaWidth;
    private javax.swing.JTextField jTextFieldCommunicationRadius;
    private javax.swing.JTextField jTextFieldFEs_Factor;
    private javax.swing.JTextField jTextFieldK;
    private javax.swing.JTextField jTextFieldNP;
    private javax.swing.JTextField jTextFieldNumOfSensors;
    private javax.swing.JTextField jTextFieldNumOfTargets;
    private javax.swing.JTextField jTextFieldSensingRadius;
    private gui.SensorDrawingsPanel newJPanel1;
    // End of variables declaration//GEN-END:variables
}
