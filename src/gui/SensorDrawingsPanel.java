/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import model.Problem;

/**
 *
 * @author osman
 */
public class SensorDrawingsPanel extends javax.swing.JPanel {

    double[] sensorCoordinates = null;
    Problem problem;
    int targetWidth = 4;
    Color sensorColor = new Color(0.0f, 0.0f, 1.0f, 0.25f);

    /**
     * Creates new form NewJPanel
     */
    public SensorDrawingsPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    public void setSolutionArr(double[] sensorCoordinates) {
        this.sensorCoordinates = sensorCoordinates;
        repaint();
    }
    
    public void setProblem(Problem problem) {
        this.problem = problem;
        repaint();
    }

    @Override
    protected void paintComponent(Graphics g) {
        if (sensorCoordinates != null && problem != null) {
            super.paintComponent(g); //To change body of generated methods, choose Tools | Templates.
            Graphics2D g2d = (Graphics2D) g;

            double scale = (double) SensorDrawingsPanel.this.getWidth() / (double) problem.areaWidth;

            for (int i = 0; i < problem.numOfSensors * 2; i += 2) {

                int x = (int) (sensorCoordinates[i] * scale);
                int y = (int) (sensorCoordinates[i + 1] * scale);
                
                g2d.setColor(Color.BLACK);
                g2d.drawString(String.valueOf(i/2), x, y);

                int scaledRadius = (int) (problem.sensingRadius * scale);

                g2d.setColor(sensorColor);
                g2d.fillOval(x - scaledRadius, y - scaledRadius, scaledRadius * 2, scaledRadius * 2);
            }

            for (int i = 0; i < problem.numOfTargets * 2; i += 2) {

                int x = (int) (problem.targetCoordinates[i] * scale);
                int y = (int) (problem.targetCoordinates[i + 1] * scale);

                //int scaledTargetWidth = (int) (targetWidth * scale);

                g2d.setColor(Color.BLACK);
                //g2d.fillOval(x - scaledTargetWidth / 2, y - scaledTargetWidth / 2, scaledTargetWidth, scaledTargetWidth);
                g2d.fillOval(x - targetWidth / 2, y - targetWidth / 2, targetWidth, targetWidth);
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
